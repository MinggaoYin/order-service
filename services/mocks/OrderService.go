// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "order-service/models"

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// GetById provides a mock function with given fields: id
func (_m *OrderService) GetById(id int64) (*models.Order, error) {
	ret := _m.Called(id)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(int64) *models.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrders provides a mock function with given fields: offset, limit
func (_m *OrderService) ListOrders(offset int, limit int) ([]models.Order, error) {
	ret := _m.Called(offset, limit)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(int, int) []models.Order); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrder provides a mock function with given fields: origins, destinations
func (_m *OrderService) PlaceOrder(origins []string, destinations []string) (*models.Order, error) {
	ret := _m.Called(origins, destinations)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func([]string, []string) *models.Order); ok {
		r0 = rf(origins, destinations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, []string) error); ok {
		r1 = rf(origins, destinations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakeOrder provides a mock function with given fields: order
func (_m *OrderService) TakeOrder(order *models.Order) (*models.Order, error) {
	ret := _m.Called(order)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(*models.Order) *models.Order); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
